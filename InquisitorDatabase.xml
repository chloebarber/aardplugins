<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, March 25, 2025, 7:36 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Inquisitor" generated by Plugin Wizard -->

<muclient>
<plugin
   name="InquisitorDatabase"
   author="Bartoc"
   id="a0df32eada26b5a8bdec0c87"
   language="Lua"
   purpose="Builds a mob database using Interrogate"
   save_state="y"
   date_written="2025-03-25 19:35:24"
   requires="5.07"
   version="1.0"
   >

</plugin>


<!--  Variables  -->

<variables>
</variables>

<!--  Script  -->


<script>
<![CDATA[

mob = {}

function ResetMob()
    mob = {
      uniqid = "", 
      Name = "", 
      Room = "", 
      Zone = "", 
      Level = 0, 
      Guild = "", 
      Subclass = "",
      Identical = 0, 
      Hp = 0, 
      Alignment = "", 
      Bash = 0.0, 
      Pierce = 0.0, 
      Slash = 0.0, 
      Acid = 0.0, 
      Air = 0.0, 
      Cold = 0.0, 
      Disease = 0.0, 
      Earth = 0.0, 
      Energy = 0.0, 
      Fire = 0.0, 
      Holy = 0.0, 
      Light = 0.0, 
      Electric = 0.0, 
      Magic = 0.0, 
      Mental = 0.0, 
      Negative = 0.0, 
      Poison = 0.0, 
      Shadow = 0.0, 
      Sonic = 0.0, 
      Water = 0.0
    }
end

function OnPluginInstall()
  GenTable()
end

function WipeDB()
  DatabaseExec ("db", [[
    DROP TABLE IF EXISTS mobs;
      ]])
  Note("Wiped Inquisitor DB")
end

function GenTable()
  DatabaseOpen("db", GetInfo(66) .. "inquisitor.sqlite", 6)
  Note("Opened DB")
  DatabaseExec ("db", [[
    CREATE TABLE IF NOT EXISTS mobs(
        uniqid TEXT NOT NULL PRIMARY KEY,
        name      TEXT NOT NULL,
        room      TEXT NOT NULL,
        zone      TEXT NOT NULL,
        level     INT NOT NULL
        guild      TEXT NOT NULL,
        subclass      TEXT NOT NULL,
        identical INT,
        hp INT,
        alignment   TEXT NOT NULL,
        bash    REAL,
        pierce    REAL,
        slash    REAL,
        acid    REAL,
        air    REAL,
        cold    REAL,
        disease    REAL,
        earth    REAL,
        energy    REAL,
        fire    REAL,
        holy    REAL,
        light    REAL,
        electric     REAL,
        magic    REAL,
        mental    REAL,
        negative    REAL,
        poison    REAL,
        shadow    REAL,
        sonic    REAL,
        water    REAL
      );
      ]])
  -- DatabaseClose("db")
  -- Note("Closed DB")
end

function InterrogationSuccessful()
  Note("Interrogation successful.")
  ResetMob()
  mob.Zone = "currentzone"
  EnableTriggerGroup("capture_entry", true)
  Note("Trigger group activated")
end

function Capture(flag, data)
  Note("Data captured - " .. flag .. ": " .. data)
  mob[flag] = data
end

function CaptureRoom(name, line, wildcards, styles)
  mob["Room"] = styles[2].text
end

function CaptureResist(name, data)
  sorted = {}
  --we're just capturing these separately to build an easily sorted list
  --ordering resists on capture reduces complexity of weakpoint analysis on run I think
  Capture(name, data)
  -- Capture("ResistanceList", sorted)
end

function ParseAlignment(flavortext)
  alignvalue = ""
  alignvalue = flavortext
  -- map flavor text to alignment range
  Capture("Alignment", alignvalue)
end

function PostEntry()
  mob.uniqid = mob.Zone .. mob.Room .. mob.Name
  dump(mob)
  DatabaseExec (db, string.format([[
  "INSERT INTO mobs (uniqid, name, room, zone, level, guild, subclass, identical, hp, alignment, bash, pierce, slash, acid, air, cold, disease, earth, energy, fire, holy, light, electric, magic, mental, negative, poison, shadow, sonic, water)
  VALUES (%s, %s, %s, %s, %d, %s, %s, %d, %d, %s, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)"
  ]]), mob.uniqid, mob.Name, mob.Room, mob.Zone, mob.Level, mob.Guild, mob.Subclass, mob.Identical, mob.Hp, mob.Alignment, mob.Bash, mob.Pierce, mob.Slash, mob.Acid, mob.Air, mob.Cold, mob.Disease, mob.Earth, mob.Energy, mob.Fire, mob.Holy, mob.Light, mob.Electric, mob.Magic, mob.Mental, mob.Negative, mob.Poison, mob.Shadow, mob.Sonic, mob.Water)
  -- convert the table to a SQL entry and insert
  EnableTriggerGroup("capture_entry", false)
  Note("Mob info captured to database.")
end

function CheckIfCatalogued(name)
  --check if name + room + zone exists
  catalogued = "false" -- make this the lookup instead
  if catalogued == false then
    iq = 0 --enable alias to interrogate
  end
end

function HeaderDisable()
  EnableTrigger("header", false)
end

function dump(o)
   if type(o) == 'table' then
      local s = '{ '
      for k,v in pairs(o) do
         if type(k) ~= 'number' then k = '"'..k..'"' end
         s = s .. '['..k..'] = ' .. dump(v) .. ','
      end
      return s .. '} '
   else
      return tostring(o)
   end
end

]]>
</script>



<aliases> -- interrrogate interrupt alias
  <alias
   match="k *"
   enabled="y"
   sequence="100"
  >
    <send>spellup silent
    interrogate %1
    kill %1</send>
  </alias>
  <alias
   match="inquisitor-wipedb"
   enabled="y"
   send_to="12"
   sequence="100"
  >
    <send>WipeDB()</send>
  </alias>
</aliases>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="start_inquisitor"
   match="^As you mercilessly interrogate"
   regexp="y"
   omit_from_output="y"
   send_to="12"
   sequence="99"
  >
  <send>InterrogationSuccessful()</send>
  </trigger>
  <trigger
   enabled="n"
   group="capture_entry"
   name="header"
   match="----------------------------------------------------------------"
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>HeaderDisable()</send>
  </trigger>
  <trigger
   enabled="n"
   group="capture_entry"
   match="Mob Short Name   : (([,'\-\w]\s?)+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Capture("Name", "%1")</send>
  </trigger>
  <trigger
   enabled="n"
   group="capture_entry"
   match="Mob Base Level   : ([\d]+)$"
   regexp="y"
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>Capture("Level", "%1")</send>
  </trigger>
  <trigger
   enabled="n"
   group="capture_entry"
   match="Guild            : (([,'\-\w]\s?)+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Capture("Guild", "%1")</send>
  </trigger>
  <trigger
   enabled="n"
   group="capture_entry"
   match="Subclass         : (([,'\-\w]\s?)+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Capture("Subclass", "%1")</send>
  </trigger>
    <trigger
   enabled="n"
   group="capture_entry"
   match="Identical Mobs   : ([\d]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Capture("Identical", "%1")</send>
  </trigger>
    <trigger
   enabled="n"
   group="capture_entry"
   match="Times Killed     : ([\d]+)$"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
    <trigger
   enabled="n"
   group="capture_entry"
   match="Mob Hp           : *([\d]+)\/([\d]+)"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Capture("Hp", "%2")</send>
  </trigger>
    <trigger
   enabled="n"
   group="capture_entry"
   match="Alignment        : (([,'\-\.\w]\s?)+)$"
   regexp="y"
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>ParseAlignment("%1")</send>
  </trigger>
  <trigger
   enabled="n"
   group="capture_entry"
   match="Note             : (([,'\-\.\w]\s?)+)$"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </trigger> -- we're just throwing away the notes, they're too general to be useful
  <trigger
   enabled="n"
   group="capture_entry"
   match="------------------------- [ Resistances ] ----------------------"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="capture_entry"
   match="([^\s]+)[\s:]+([0-9\-\.]+)%"
   regexp="y"
   omit_from_output="y"
   keep_evaluating="y"
   send_to="12"
   sequence="100"
  >
  <send>CaptureResist("%1", "%2")</send>
  </trigger> -- may need to check syntax on keep evaluating or if it's appropriate
  <trigger
   enabled="n"
   group="capture_entry"
   name="footer"
   match="----------------------------------------------------------------"
   omit_from_output="y"
   send_to="12"
   sequence="101"
  >
  <send>PostEntry()</send>
  </trigger>
  <trigger match="^\{rname\}(?P<room>.*)"
    name="inquisitor_room" script="CaptureRoom" enabled="y"  keep_evaluating="y"  regexp="y"  omit_from_output="y"  send_to="12"  sequence="50"  >
</trigger>
</triggers>

</muclient>

