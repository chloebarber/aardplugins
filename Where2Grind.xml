<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, March 24, 2025, 8:53 AM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Where2Level" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Where2Grind"
   author="Bartoc"
   id="cb01540cabe8232f0439a4ed"
   language="Lua"
   purpose="Where to go to grind next"
   save_state="y"
   date_written="2025-03-24 08:52:17"
   requires="5.07"
   version="1.0"
   >

</plugin>


<!--  Variables  -->

<variables>
  <variable name="w2g_current_level">150</variable>
  <variable name="w2g_alignment_mode">good</variable>
  <variable name="w2g_rangemin">2</variable>
  <variable name="w2g_rangemax">10</variable>
</variables>

<!--  Script  -->


<script>
<![CDATA[
require "aard_register_z_on_create"

require "mw_theme_base"
require "serialize"
require "movewindow"
require "commas"
require "gmcphelper"
require "copytable"
require "math"
require "table"
require "themed_miniwindows"
require "tprint"
dofile(GetInfo(60).."aardwolf_colors.lua")

W2GWindow = ThemedTextWindow(
   GetPluginID(),  -- string, required, a unique identifier for this window
   0,  -- integer, required, where to put it if the player hasn't moved it
   0,  -- integer, required, where to put it if the player hasn't moved it
   400,  -- integer, required, how big to make it if the player hasn't moved it
   100,  -- integer, required, how big to make it if the player hasn't moved it
   "Where2Grind",  -- string, optional (nil means no titlebar), text to put into the title
   "center",  -- string, optional (default is "center"), "left", "center", or "right"
   false,  -- boolean, optional (default is false), true adds a close button in the top left
   true,  -- boolean, optional (default is false), make the window resizeable
   true,  -- boolean, optional (default is false), add a scrollbar and mousewheel scrolling
   true,  -- boolean, optional (default is false), make the text selectable
   true,  -- boolean, optional (default is false), make the text copyable via right-click
   false,  -- boolean, optional (default is false), turn detected URLs into clickable links
   false,  -- boolean, optional (default is false), automatically wrap text lines that are too wide
   nil,  -- string, optional (default is Dina), override the title font name
   nil,  -- integer, optional (default is 10), override the title font size
   nil,  -- string, optional (default is Dina), override the body text font name
   10,  -- integer, optional (default is 10), override the body text font size
   nil,  -- integer, optional (default is 1000), maximum number of text lines to keep
   nil,  -- integer, optional (default is 5 pixels), space between text and miniwindow frame
   nil,  -- boolean, optional (default is false), true will prevent the window from appearing until you call :show() on it
   false  -- boolean, optional (default is false), if true, pixels the same color as Theme.PRIMARY_BODY will be transparent
)

gmcp_char = {}
-- current_level = GetVariable("w2g_current_level")
-- alignment_mode = GetVariable("w2g_alignment_mode")
-- rangemin = GetVariable("w2g_rangemin")
-- rangemax = GetVariable("w2g_rangemax")

current_level = 0
alignment_mode = "good"
range_min_below = 2
range_max_above = 10
death_table = {}

function OnPluginInstall()
    --UpdateWhere2Grind() -- tester
    Send_GMCP_Packet("request status") -- real
end

-- morn and yajan said use triggers instead so
-- enable start and end triggers on script run > find start of mobdeaths > start trigger enables entry capture trigger > capture trigger adds info to dict > end trigger disables triggers and fires processing function

function UpdateWhere2Grind()
    death_table = {} -- reset table
    range_min_one = tonumber(current_level) - tonumber(range_min_below)
    rangemax = tonumber(current_level) + range_max_above
    if range_min_one < 1 then
        range_min_one = 1
    end
    SendNoEcho("mobdeaths" .. " " .. range_min_one .. " " .. rangemax .. " " .. alignment_mode)
    Note("Mobdeaths sent - " .. "mobdeaths" .. " " .. range_min_one .. " " .. rangemax .. " " .. alignment_mode)
    EnableTriggerGroup("table_capture", true)
end

function CaptureMobdeath(level, area)
    level = tonumber(level)
    -- death_table[area] = {minlevel, maxlevel, density}
    if death_table[area] ~= nil then
        if level < death_table[area][1] then
            death_table[area][1] = level
        elseif level > death_table[area][2] then
            death_table[area][2] = level
        end
        death_table[area][3] = death_table[area][3] + 1
    else
        death_table[area] = {level, level, 1}
    end
end

function compare(a,b)
  return tonumber(a[1]) < tonumber(b[1])
end

function ClickableGoto(zone)
    return Hyperlink("runto " .. "poopy", "Run here")
end

function ProcessData()
    EnableTriggerGroup("table_capture", false)
    table.sort(death_table, compare)
    
    W2GWindow:clear()
    for key, val in pairs(death_table) do
        W2GWindow:add_text(val[1] .. " - " .. val[2] .. "   " .. key .. " (Density:" .. val[3] .. ")")
    end
    W2GWindow:draw()
    Note("data processed")
end

function matched(matcj)
    Note(matcj)
end

function OnPluginBroadcast (msg, id, name, text)

    -- Look for GMCP handler.
    if (id == '3e7dedbe37e44942dd46d264') then
       if (text == 'reload') then
          -- invalidate current data
          FBStarted = false
          return
       end
 
       if (text == "char.status") then
            gmcp_char.status = gmcp("char.status")
            if tonumber(gmcp_char.status.level) > tonumber(current_level) then
                Note("Level updated to " .. gmcp_char.status.level)
                current_level = gmcp_char.status.level
                UpdateWhere2Grind()
            end
       end
    elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
       CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
    end
 end
]]>
</script>
<aliases>
  <alias
   match="w2g-refresh"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>UpdateWhere2Grind()</send>
  </alias>
</aliases>
<!--  Triggers  -->

<triggers
   muclient_version="5.07-pre"
   world_file_version="15"
  >
  <trigger
   enabled="y"
   group="table_capture"
   match="Top \d+ most popular kills for levels \d+ to \d+"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="table_capture"
   match="No.   Mob name                                Level  Area Name            Killed"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="table_capture"
   match="---   --------------------------------------- -----  -------------------- ------"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="table_capture"
   match="([0-9]+)  (([,'\w]+\s?)+)\s+[0-9]+"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>CaptureMobdeath("%1","%2")</send>
  </trigger>
  <trigger
   enabled="y"
   group="table_capture"
   match="-------------------------------------[ THE END ]--------------------------------"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="table_capture"
   match="See also: Mobkills, Areakills and Areadeaths commands."
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>ProcessData()</send>
  </trigger>
</triggers>

</muclient>
